{"version":3,"sources":["api/api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["getDataFromServer","url","fetch","then","response","json","serverResponse","data","getTodos","getUser","userId","TodoList","state","inputFilter","selectFilter","handleChange","event","target","name","value","setState","this","props","todos","selectedUserId","onUserSelected","todosFilteredByInput","filter","todo","completed","title","includes","className","type","onChange","id","map","key","classNames","TodoList__item","readOnly","button","onClick","React","PureComponent","defaultProps","PropTypes","arrayOf","shape","CurrentUser","user","setUser","prevProps","style","textAlign","email","phone","fontSize","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0882011e.chunk.js","sourcesContent":["const TODOS_URL = 'https://mate-api.herokuapp.com/todos';\nconst USER_URL = `https://mate-api.herokuapp.com/users/`;\n\nexport const getDataFromServer = url => fetch(url)\n  .then(response => response.json())\n  .then(serverResponse => serverResponse.data);\n\nexport const getTodos = getDataFromServer(TODOS_URL);\nexport const getUser = userId => getDataFromServer(`${USER_URL}${userId}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\nexport class TodoList extends React.PureComponent {\n  state = {\n    inputFilter: '',\n    selectFilter: 'all',\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { todos, selectedUserId, onUserSelected } = this.props;\n    const { inputFilter, selectFilter } = this.state;\n\n    const todosFilteredBySelect = todos.filter((todo) => {\n      switch (selectFilter) {\n        case 'all':\n          return todo;\n\n        case 'active':\n          return !todo.completed;\n\n        default: return todo.completed;\n      }\n    });\n\n    const todosFilteredByInput = todosFilteredBySelect.filter(\n      todo => todo.title && todo.title.includes(inputFilter),\n    );\n\n    return (\n      <div className=\"TodoList\">\n        <label>\n          Filter by title:&nbsp;\n          <input\n            type=\"text\"\n            name=\"inputFilter\"\n            value={inputFilter}\n            onChange={this.handleChange}\n          />\n        </label>\n        <select\n          name=\"selectFilter\"\n          id=\"selectFilter\"\n          onChange={this.handleChange}\n        >\n          <option value=\"all\">Show all</option>\n          <option value=\"active\">Show active</option>\n          <option value=\"completed\">Show completed</option>\n        </select>\n\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todosFilteredByInput.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames({\n                  TodoList__item: true,\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n              >\n                <label>\n                  <input type=\"checkbox\" readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  type=\"button\"\n                  className={classNames({\n                    button: true,\n                    'TodoList__user-button': selectedUserId !== todo.userId,\n                    'TodoList__user-button--selected':\n                      selectedUserId === todo.userId,\n                  })}\n                  onClick={() => onUserSelected(todo.userId)}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.defaultProps = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      userId: null,\n      completed: null,\n      title: null,\n    }),\n  ),\n};\n\nTodoList.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  onUserSelected: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      userId: PropTypes.number,\n      completed: PropTypes.bool,\n      title: PropTypes.string,\n      createdAt: PropTypes.string.isRequired,\n      updatedAt: PropTypes.string.isRequired,\n    }),\n  ),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.setUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId === this.props.userId) {\n      return;\n    }\n\n    this.setUser();\n  }\n\n  setUser = () => getUser(this.props.userId)\n    .then(user => this.setState({ user }));\n\n  render() {\n    const { user } = this.state;\n\n    return user ? (\n      <div\n        className=\"CurrentUser\"\n        style={{ textAlign: 'center' }}\n      >\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:&nbsp;\n            {user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          type=\"button\"\n          onClick={() => this.props.onUserSelected(0)}\n          style={{ fontSize: '24px' }}\n        >\n          Clear\n        </button>\n      </div>\n    ) : (\n      <p>One second...</p>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onUserSelected: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getTodos } from './api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos\n      .then((todos) => {\n        this.setState({ todos });\n      });\n  }\n\n  onUserSelected = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  };\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUserId={selectedUserId}\n            onUserSelected={this.onUserSelected}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onUserSelected={this.onUserSelected}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}